@page "/customerlist"
@using FuelStation.Blazor.Client.Shared.Extra
@using FuelStation.Blazor.Shared.Customer;
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime

<h3>Customer List</h3>

@if (isLoading) {
   <Spinner Type="SpinnerType.Border" />
}
else {
    <button class="btn btn-primary" @onclick="()=> CreateItem()">Create</button>

    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>Name</th>
                <th>Surname</th>
                <th>Card Number</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customer in customerList) {
                <tr>
                    <td>@customer.Name</td>
                    <td>@customer.Surname</td>
                    <td>@customer.CardNumber</td>
                    <td>
                        <button class="btn btn-primary" @onclick="()=> EditItem(customer)">Edit</button>
                        <button class="btn btn-danger" @onclick="()=> DeleteItem(customer)">Delete</button>
                    </td>
                </tr>
            }
            <button class="btn btn-warning" @onclick="()=>BackTo()">Back</button>
        </tbody>
    </table>
}


@code {
    private List<CustomerListDto> customerList = new();
    bool isLoading { get; set; } = true;

    protected override async Task OnInitializedAsync() {
        await LoadItemsFromServer();
        isLoading = false;
    }

    private async Task LoadItemsFromServer() {
        customerList = await httpClient.GetFromJsonAsync<List<CustomerListDto>>("customer");
    }

    private async Task CreateItem() {
        navigationManager.NavigateTo("customerlist/edit");
    }

    private async Task EditItem(CustomerListDto customer) {
        navigationManager.NavigateTo($"customerlist/edit/{customer.Id}");
    }

    private async Task DeleteItem(CustomerListDto customer) {
        var confirm = await jsRuntime.InvokeAsync<bool>("confirm", "Delete Customer. Are you sure?");
        if (confirm) {
            var response = await httpClient.DeleteAsync($"customer/{customer.Id}");
            response.EnsureSuccessStatusCode();
            await LoadItemsFromServer();
        }
    }

    private void BackTo() {
        navigationManager.NavigateTo("/");
    }
}