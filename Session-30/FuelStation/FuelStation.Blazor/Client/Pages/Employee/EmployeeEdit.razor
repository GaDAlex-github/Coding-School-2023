@page "/employeelist/edit/{Id:int?}"
@using FuelStation.Blazor.Shared.Employee;
@using FuelStation.Blazor.Client.Shared.Extra
@using FuelStation.Model;
@inject IJSRuntime jsRuntime
@inject HttpClient httpClient
@inject NavigationManager navigationManager

<h3>Create/Edit Employee</h3>

@if (Employee == null) {
    <Spinner Type="SpinnerType.Border" />
}
else {
    <EditForm Model="Employee" OnValidSubmit="OnSave">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="row mt-2">
            <div class="col-md-6">
                <label class="form-label">Name</label>
                <InputText class="form-control" @bind-Value="@Employee.Name" />
                <ValidationMessage For="@(() => Employee.Name)" />
            </div>
        </div>
        <div class="row mt-2">
            <div class="col-md-6">
                <label class="form-label">Surname</label>
                <InputText class="form-control" @bind-Value="@Employee.Surname" />
                <ValidationMessage For="@(() => Employee.Surname)" />
            </div>
        </div>
        <div class="row mt-2">
            <div class="col-md-6">
                <label class="form-label">Hire Date End</label>
                <InputDate class="form-control" @bind-Value="@Employee.HireDateEnd" />
                <ValidationMessage For="@(() => Employee.HireDateEnd)" />
            </div>
        </div>
        <div class="row mt-2">
            <div class="col-md-6">
                <label class="form-label">Salary Per Month</label>
                <InputNumber class="form-control" @bind-Value="@Employee.SalaryPerMonth" />
                <ValidationMessage For="@(() => Employee.SalaryPerMonth)" />
            </div>
        </div>
        <div class="row mt-2">
            <div class="col-md-6">
                <label class="form-label">Employee Type</label>
                <InputSelect class="form-control" @bind-Value="Employee.EmployeeType">
                    @foreach (var enumValue in Enum.GetValues<EmployeeType>()) {
                        <option value="@enumValue">@enumValue</option>
                    }
                </InputSelect>
            </div>
        </div>
        <div class="row mt-2">
            <div class="col-md-6">
                <button class="btn btn-success" type="submit">Save Changes</button>
                <button class="btn btn-danger" @onclick="OnCancel">Cancel</button>
            </div>
        </div>
    </EditForm>
}

@code {
    [Parameter] public int? Id { get; set; }
    EmployeeEditDto? Employee { get; set; } = new();

    protected override async Task OnInitializedAsync() {

        if (Id == null) {

            Employee = await httpClient.GetFromJsonAsync<EmployeeEditDto>("employee");
        }
        else {
            Employee = await httpClient.GetFromJsonAsync<EmployeeEditDto>($"employee/{Id}");
        }
    }

    private void OnCancel() {
        navigationManager.NavigateTo("employeelist");
    }

    private async Task OnSave() {
        HttpResponseMessage? response = null;
        if (Id == null) {
            response = await httpClient.PostAsJsonAsync("employee", Employee);
        }
        else {
            response = await httpClient.PutAsJsonAsync("employee", Employee);
        }
        string responseBody = await response.Content.ReadAsStringAsync();
        await jsRuntime.InvokeVoidAsync("alert", responseBody);
        response.EnsureSuccessStatusCode();
        if ((int)response.StatusCode == 200)
            navigationManager.NavigateTo("employeelist");
    }    
}
